}
}
for (i in input$repetitions){
aux <- runif(1)
if (aux>0.5){
a[i,] <- sample(box1,size,replace = TRUE)
} else {
a[i,] <- sample(box2,size)
}
}
runApp()
dat1
a
blue_frequs
head(a)
sapply(blue_counts, function(u) u[1])
sapply(blue_counts[[1]], function(u) u[1])
sapply(blue_counts, function(u) u[[1]])
blue_frequs[[1]]
blue_frequs[[1]][4]
sapply(blue_counts, function(u) u[[1]][4])
blue_frequs[[1]][4]
blue_frequs[[2]][4]
blue_frequs[[3]][4]
blue_frequs[[4]][4]
blue_frequs[[5]][4]
head(blue_counts)
head(blue_counts) == 0
repetition
for (num_of_b in 0:4){
temp_frequs <- cumsum(blue_counts==num_of_b)/1:repetition
blue_frequs[[num_of_b+1]] <- temp_frequs
}
head(blue_frequs)
blue_frequs
head(mtcars)
head(mtcars)
install.packages("ggvis")
install.packages("ggvis")
library(ggvis)
head(airquality)
head(swiss)
colnames(swiss)
ggvis(swiss,x=~Fertility, y=~infant.Mortality)+layer_points()
layer_points(ggvis(swiss,x=~Fertility, y=~infant.Mortality))
colnames(swiss)
layer_points(ggvis(swiss,x=~Fertility, y=~Infant.Mortality))
swiss %>% ggvis(~Fertility,~Infant.Mortality) %>% layer_points()
layer_points(ggvis(swiss,x=~Fertility, y=~Infant.Mortality))
swiss %>% ggvis(~Fertility,~Infant.Mortality) %>% layer_points()
library(ggvis)
layer_points(ggvis(swiss,x=~Fertility, y=~Infant.Mortality))
layer_points(ggvis(swiss,x=~Fertility, y=~Infant.Mortality))
swiss %>% ggvis(~Fertility,~Infant.Mortality) %>% layer_points(shape := "diamond",
stroke := "blue")
colnames(swiss)
swiss %>% ggvis(~Fertility,~Infant.Mortality,stroke := "Agriculture") %>% layer_points(shape := "diamond", stroke := "blue")
swiss %>% ggvis(~Fertility,~Infant.Mortality,stroke := "Agriculture") %>% layer_points(shape := "diamond")
swiss %>% ggvis(~Fertility,~Infant.Mortality,stroke=~Agriculture) %>% layer_points(shape := "diamond")
head(swiss)
swiss %>% ggvis(~Fertility,~Infant.Mortality,stroke=~Agriculture) %>% layer_points(shape := "diamond")
swiss %>% ggvis(~Fertility,~Infant.Mortality,size=~Agriculture) %>% layer_points(shape := "diamond")
head(swiss)
swiss %>% ggvis(~Fertility,~Infant.Mortality,fill=~Agriculture) %>% layer_points(shape := "diamond")
head(swiss)
) %>%
swiss %>%
ggvis(~Fertility,~Infant.Mortality,
size := input_slider(10,150),
opacity := input_slider(0,1)) %>%
layer_points()
runApp()
box
box2
cumsum(blue_counts==0)
blue_frequs
a
blue_counts
blue_frequs
cumsum(blue_counts==1)
blue_frequs(1)
blue_frequs[1]
blue_frequs[2]
cumsum(blue_counts==1)
blue_frequs[2]
cumsum(blue_counts==0)
blue_frequs[1]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
table(drawn_balls)
table(drawn_balls)/repetition
table(drawn_balls)
runApp()
blue_counts
table(blue_counts)
table(blue_counts)/input$repetitions
table(blue_counts)/100
runApp()
dummy1979 <- c(rep("0",56))
dummy_1979
dummy1979
dummy1979[32:56] <- 1
dummy1979
intdef
intdef <- mutate(intdef,dummy1979)
intdef
colnames(intdef)
fit3 <- lm(intdef$i3~intdef$inf+intdef$def+intdef$dummy1979)
plot(fit3)
summary(fit3)
is.factor(dummy1979)
dummy1979 <- as.factor(dummy1979)
is.factor(dummy1979)
intdef <- mutate(intdef,dummy1979)
fit3 <- lm(intdef$i3~intdef$inf+intdef$def+intdef$dummy1979)
summary(fit3)
View(intdef)
dummy1979[33:56] <- 1
is.factor(dummy1979)
dummy1979
intdef <- mutate(intdef,dummy1979)
intdef <- mutate(intdef,dummy1979)
fit3 <- lm(intdef$i3~intdef$inf+intdef$def+intdef$dummy1979)
summary(fit3)
dummy1979[33]
dummy1979[32]
dummy1979[1:32] <- 0
dummy1979[32]
intdef <- mutate(intdef,dummy1979)
fit3 <- lm(intdef$i3~intdef$inf+intdef$def+intdef$dummy1979)
summary(fit3)
View(intdef)
intdef$dummy1979 <- NULL
rm(dummy1979)
head(USArrests)
head(USArrests)
stats <- row.names(USArrests)
states <- row.names(USArrests)
head(states)
head(USArrests)
states <- row.names(USArrests)
head(states)
nchar(states)
head(states)
nchar(states)
nchar(states)
tolower(states)
toupper(states)
casefold(states,upper=TRUE)
cadefold(states,upper=FALSE)
casefold(states,upper=FALSE)
num_chars <- nchar(states)
table(num_chars)
count(num_chars)
table(num_chars)
table(num_chars)/
num_chars
num_chars
table(num_chars)
char_freqs <- table(num_chars)
barplot(char_freqs)
stats(1:5)
states(1:5)
states[1:5]
num_chars[1:5]
paste(states[1:5],"=",num_chars[1:5])
paste(states,collapse = '')
paste(states[1:5],collapse = '')
substr(states[1:5],1,3)
substr(states[1:5],-1,-3)
substr(states[1:5],-3,-1)
substr(states[1:5],-3)
substr(states[1:5],-3,-3)
substr(states[1:5],-3,0)
substr(states[1:5],-3,-2)
substr(states[1:5])
states[1:5]
num_chars[1:5]
substr(states[1:5],nchar[1:5]-3,nchar[1:5])
substr(states[1:5],nchar[1:5][-3],nchar[1:5])
substr(states[1:5],4,nchar[1:5])
substr(states[1],4,nchar[1])
num_chars
substr(states[1:5],1,nchar[1:5])
substr(states[1:5],1,num_chars[1:5])
substr(states[1:5],3,num_chars[1:5])
substr(states[1:5],num_chars[1:5][-3],num_chars[1:5])
substr(states[1:5],num_chars[1:5][3],num_chars[1:5])
substr(states[1:5],num_chars[1:5][2],num_chars[1:5])
states
num_chars[1:5]
states[1:5]
str_sub(states[1:5],-3,-1)
install.packages("stringer")
install.packages("stringr")
install.packages("stringr")
library(stringr)
str_sub(states[1:5],-3,-1)
str_sub(states[1:5],1,-3:-1)
str_sub(states[1:5],1,c(-3,-1))
str_sub(states[1:5],1,-3)
paste(states[1:5],"=",num_chars[1:5])
paste(substr(states[1:5],1,1))
paste(substr(states[1:5],1,1),str_sub(states[1:5],-3,-1))
paste(substr(states[1:5],1,1),str_sub(states[1:5],-3,-1),collapse = "")
paste(substr(states[1:5],1,1),str_sub(states[1:5],-3,-1))
states[num_chars==4]
num_chars
states[num_chars==10]
to_celsius <- function(x = 1) {
(x - 32) * (5/9)
}
to_kelvin <- function(x = 1) {
(x + 459.67) * (5/9)
}
to_reaumur <- function(x = 1) {
(x - 32) * (4/9)
}
to_rankine <- function(x = 1) {
x + 459.67
}
temp_convert(30, 'celsius')
temp_convert <- function(x = 1, to = "celsius") {
switch(to,
"celsius" = to_celsius(x),
"kelvin" = to_kelvin(x),
"reaumur" = to_reaumur(x),
"rankine" = to_rankine(x))
}
temp_convert(30, 'celsius')
temp_convert(30, 'CELSIUS')
temp_convert(30, 'CELSIUS')
temp_convert(30, 'celsius')
file <- c("file1.csv","file2.csv","file3.csv","file4.csv","file5.csv")
files <- c(rep("file",10))
files
numbs <- c(1:10)
numbs
csv <- c(rep(".csv",10))
csv
paste(files,numbs,csv)
paste(files,numbs,csv,sep = '')
paste(files,numbs,csv)
paste(files,numbs,csv,sep = "")
paste(files,numbs,csv,sep = '')
paste(files,numbs,csv,sep = '')
paste(files,numbs,csv,sep = ' ')
paste(files,numbs,csv,sep = '')
files <- c(rep("dataset",10))
paste(files,numbs,csv,sep = '')
# name of output file
outfile <- "output.txt"
# writing to 'outfile.txt'
cat("This is the first line", file = outfile)
# insert new line
cat("\n", file = outfile, append = TRUE)
cat("A 2nd line", file = "output.txt", append = TRUE)
# insert 2 new lines
cat("\n\n", file = outfile, append = TRUE)
cat("\nThe quick brown fox jumps over the lazy dog\n",
file = outfile, append = TRUE)
getwd()
colors()
colors(azure)
colors[2]
colors()
colors[1:3]
colors(1:3)
is_color <- function(x){
if (x==color()){
print("TRUE")
} else {
print("FALSE")
}
}
# test it:
is_color('yellow')  # TRUE
# test it:
is_color("red")  # TRUE
is_color <- function(x){
if (x==colors()){
print("TRUE")
} else {
print("FALSE")
}
}
# test it:
is_color("red")  # TRUE
# test it:
is_color("white")  # TRUE
is_color('blu')     # FALSE
colors()
# your is_color() function
is_color <- function(x){
if (x in colors()){
# your is_color() function
is_color <- function(x){
if (x %in% colors()){
print("TRUE")
} else {
print("FALSE")
}
}
# test it:
is_color("white")  # TRUE
is_color('blu')     # FALSE
is_color('turkuoise') # FALSE
# this should plot
colplot('tomato')
}
}
}
}
}
}
}
}
}
colpot <- function(x){
if (is_color(x)=="TRUE"){
scatter <- plot(runif(1),runif(1),main = paste("Testing color",x,sep = ''))
} else {
stop(paste("invalid color",x,sep = ''))
}
}
colplot('tomato')
colplot <- function(x){
if (is_color(x)=="TRUE"){
scatter <- plot(runif(1),runif(1),main = paste("Testing color",x,sep = ''))
} else {
stop(paste("invalid color",x,sep = ''))
}
}
colplot('tomato')
colplot <- function(x){
if (is_color(x)=="TRUE"){
scatter <- plot(runif(1),runif(2),main = paste("Testing color",x,sep = ''))
} else {
stop(paste("invalid color",x,sep = ''))
}
}
colplot('tomato')
colplot <- function(x){
if (is_color(x)=="TRUE"){
scatter <- plot(runif(1),runif(1),main = paste("Testing color",x,sep = ''))
} else {
stop(paste("invalid color",x,sep = ''))
}
}
colplot('tomato')
colplot <- function(x){
if (is_color(x)=="TRUE"){
scatter <- plot(runif(),runif(),main = paste("Testing color",x,sep = ''))
} else {
stop(paste("invalid color",x,sep = ''))
}
}
colplot('tomato')
colplot <- function(x){
if (is_color(x)=="TRUE"){
scatter <- plot(runif(10),runif(10),main = paste("Testing color",x,sep = ''))
} else {
stop(paste("invalid color",x,sep = ''))
}
}
colplot('tomato')
colplot <- function(x){
if (is_color(x)=="TRUE"){
scatter <- plot(runif(10),runif(10),main = paste("Testing color",x))
} else {
stop(paste("invalid color",x,sep = ''))
}
}
colplot('tomato')
colplot('tomato')
shiny::runApp()
runApp()
dum1979 <- c(rep(0,56))
dummy1979 <- as.factor(dummy1979)
dum1979
dum1979[33:56] <- 1
dum1979
intdef <- mutate(intdef,dum1979)
intdef <- mutate(intdef,dum=dum1979)
library(dplyr)
intdef <- mutate(intdef,dum=dum1979)
colnames(intdef)
fit3 <- lm(intdef$i3~intdef$inf+intdef$def+intdef$dum)
plot(fit3)
summary(fit3)
plot(fit3)
library(readxl)
library(dplyr)
intdef <- read_excel("/Users/baibai/Desktop/econ140/hw05/intdef.xlsx")
intdef
dum1979 <- c(rep(0,56))
dum1979[33:56] <- 1
rm(dummy)
intdef <- mutate(intdef,dum=dum1979)
colnames(intdef)
fit1 <- lm(intdef$i3~intdef$inf+intdef$def)
fit3 <- lm(intdef$i3~intdef$inf+intdef$def+intdef$dum)
summary(fit3)
traccis <- read_excel("/Users/baibai/Desktop/econ140/hw05/TRAFFIC.xlsx")
View(traccis)
getwd()
traccis <- read_excel("/hw05/TRAFFIC.xlsx")
traccis <- read_excel("hw05/TRAFFIC.xlsx")
traccis <- read_excel("TRAFFIC.xlsx")
View(traccis)
library(readxl)
traccis <-read_excel("TRAFFIC.xlsx")
View(traccis)
traff<-read_excel("traffic.xlsx")
View(traff)
rm(traccis)
View(traff)
rm(traff)
summary(fit3)
trafic <- read_excel("/traffic.xlsx")
trafic <- read_excel("traffic.xlsx")
View(trafic)
library(xlsx)
trafic <- read_excel("traffic.xlsx")
View(trafic)
rm(trafic)
traffic <- read.xlsx2("traffic.xlsx")
traffic <- read.xlsx2("traffic.xlsx",sheetName = "sheet 1")
traffic <- read.xlsx2("traffic.xlsx",sheetName = "TRAFFIC")
View(traffic)
which(traffic$beltlaw==1)
traffic$year[traffic$beltlaw==1]
traffic$year[traffic$spdlaw==1]
dim(traffic)
ts(traffic, frequency = 12,start = 1981)
View(traffic)
View(traffic)
traffic1 <- ts(traffic, frequency = 12,start = 1981)
View(traffic1)
traffic1
typeof(traffic1)
typeof(traffic)
traffic2 <- as.matrix(traffic)
typeof(traffic2)
is.matrix(traffic2)
traffic2 <- ts(traffic2, frequency = 12,start = 1981)
View(traffic2)
traffic2
traffic2 <- ts(traffic2, frequency = 12,start = 1981)
traffic2
plot(traffic2)
plot(traffic)
add <- function(a,b){
a+b
}
add('1','2')
add(3,5)
add(c(1,2),c(3,4))
if(length(a)==1 &
length(b)==1){
return(a+b)
} else {
stop
}
add <- function(a,b){
if(length(a)==1 &
length(b)==1){
return(a+b)
} else {
stop
}
}
add(3,4)
add <- function(a,b){
if(length(a)==1 &
length(b)==1){
return(a+b)
} else {
stop("argument length should be 1")
}
}
add(c(1,2),3)
c(1, 2) + 3
add(c(1,2),3)
install.packages("")
install.packages("testhat")
install.packages("testthat")
library(testthat)
context("functions add")
library(ggvis)
getwd()
setwd("/Users/baibai/stat133/stat133-hws-fall17/hw4")
getwd()
runApp('app-ggvis.R')
getwd()
setwd("/Users/baibai/stat133/stat133-hws-fall17/hw4/app-ggvis.R")
runApp()
runApp()
library(ggvis)
vis_plot<-reactive({
xvar <- prop("x", as.symbol(input$select))
histogram <- faithful %>%
ggvis(x=xvar) %>%
layer_histograms(stroke := 'white', width = input$width)
})
